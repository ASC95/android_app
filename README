The actual Android Stuiod project's root directory is TestProject

Milestone 3 Submission - Due: Monday, November 21 @ 11:55 PM
App Requirements:

Previous requirements still work
-you know it

GPS must be implemented
-What our GPS does for the purpose of this milestone (and you're demo)
 -Clicking the "Post" button will give you two toasts for each location. One toast will say how far you are from one of the 4 current 
    locations we are supporting, and whether or not you are within the 20m radius required for posting. The second toast says whether or 
    not you are able to post (remember, the post feature is coming soon(TM))
    
 -So, for the GPS demo
  0)Allow location priveleges when the app starts up
  1)Press the Post Picture button
  2)If you are within a 20m radius of one of the 4 locations (being in rice works well for this since Einstein's is a location), you will get
    1 toast saying how far and 1 toast saying if you can post
  3)If you are not at any of the locations, you are going to get 1 toast with the distance you are away and 1 toast saying you are too far away
    to post 
 -For final demo, being within 20m will open a new activity for uploading an image to the cloud web service and then that will be able to be viewed
    in the app main screen. You will NOT see a toast for every location, only the one(s) you are in range of and can viably take a pic of

-What I did with the GPS
 -Hardcoded in the locations for our set "Places" (The Pav, Dumpling Cart, Einstien's, and O'Chill)
 -When you hit Post Picture the app grabs your last location (it updates every 30s) and compares your long/lat using something called the Haversine formula
  to see if your current location is within a 20m radius of the actual coordinates of the "place"
	-This compare is just an if current distance < radius ret true; else ret false
 - Toast w/ distance in the haversine method, toast in the checking forloop saying if you are in range

    
Local data storage must be implemented
-Yes, settings stores a username
-Themes coming for final turn-in/demo

Web service must be implemented
-We are pulling images from the webservice using JSON, parsing them and displaying them.
-For proof of interaction with the Cloudinary Image Hosting service, checkout "Cloud Demo.txt" and follow the instructions.
You can upload a custom image to cloudinary and have it displayed in the app.

Obvious progress towards your user requirements
-Remaining requirements
 -Posting activity (w/camera, we already have the ability to post images just no UI for it atm)
 -Support for more locations (shooting for ~10, currently sitting at 4)
 -Themes
 -Photo moderation
